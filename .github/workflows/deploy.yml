# .github/workflows/deploy.yml

name: Deploy PostgreSQL Replication

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # === REEMPLAZAR EL PASO 'Set up Docker Compose' CON ESTO ===
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin # Instala la versión v2 (plugin)
          # O para la versión v1 (menos común ahora):
          # sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          # sudo chmod +x /usr/local/bin/docker-compose
          # sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose # Crear enlace simbólico
      # ==========================================================
      - name: Login to Docker Hub (Optional, if pushing images)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker-compose -f replicacion_postgresql/docker-compose.yml build

      - name: Start PostgreSQL services
        run: |
          docker-compose -f replicacion_postgresql/docker-compose.yml up -d

      - name: Wait for PostgreSQL Master to be ready
        run: |
          echo "Waiting for pg-master to be ready..."
          max_attempts=30
          attempt=0
          while ! docker exec pg-master pg_isready -h localhost -p 5432 -U postgres; do
            echo "Master not ready yet. Waiting..."
            sleep 5
            attempt=$((attempt+1))
            if [ "$attempt" -ge "$max_attempts" ]; then
              echo "Master did not become ready in time. Exiting."
              exit 1
            fi
          done
          echo "pg-master is ready!"

      - name: Verify Master Databases
        run: |
          echo "Verifying databases on pg-master..."
          docker exec pg-master psql -U postgres -d replicadb -c "\l"

      - name: Wait for PostgreSQL Slave(s) to be ready and replicate
        run: |
          echo "Waiting for pg-slave to be ready and replicate..."
          max_attempts=30
          attempt=0
          # Nota: La verificación de IP dinámica en GitHub Actions es compleja en el mismo job.
          # Una alternativa más simple para la verificación de replicación es esperar un tiempo
          # y luego verificar directamente en el slave.
          # O, si quieres mantener esta línea, asegúrate de que 'pg_slave' sea accesible por nombre de servicio
          # dentro de la red Docker del runner.
          # Para simplificar, podrías quitar la condición 'client_addr' y solo verificar 'state=streaming'.
          while ! docker exec pg-master psql -U postgres -d replicadb -c "SELECT count(*) FROM pg_stat_replication WHERE state='streaming';" | grep -q '1'; do
            echo "Slave not streaming yet. Waiting..."
            sleep 5
            attempt=$((attempt+1))
            if [ "$attempt" -ge "$max_attempts" ]; then
              echo "Slave did not become streaming in time. Exiting."
              exit 1
            fi
          done
          echo "pg-slave is streaming!"

          # Si tienes pg-slave2:
          # echo "Waiting for pg-slave2 to be ready and replicate..."
          # attempt=0
          # while ! docker exec pg-master psql -U postgres -d replicadb -c "SELECT count(*) FROM pg_stat_replication WHERE state='streaming';" | grep -q '2'; do # Cambia a '2' si esperas 2 slaves
          #   echo "Slave2 not streaming yet. Waiting..."
          #   sleep 5
          #   attempt=$((attempt+1))
          #   if [ "$attempt" -ge "$max_attempts" ]; then
          #     echo "Slave2 did not become streaming in time. Exiting."
          #     exit 1
          #   fi
          # done
          # echo "pg-slave2 is streaming!"

      - name: Verify Slave Databases
        run: |
          echo "Verifying databases on pg-slave..."
          docker exec pg-slave psql -U postgres -d replicadb -c "\l"
          docker exec pg-slave psql -U postgres -d tienda -c "\dt"
          docker exec pg-slave psql -U postgres -d tienda -c "SELECT * FROM productos;"

          # Si tienes pg-slave2:
          # echo "Verifying databases on pg-slave2..."
          # docker exec pg-slave2 psql -U postgres -d replicadb -c "\l"
          # docker exec pg-slave2 psql -U postgres -d tienda -c "\dt"
          # docker exec pg-slave2 psql -U postgres -d tienda -c "SELECT * FROM productos;"

      - name: Teardown services
        if: always()
        run: |
          echo "Tearing down Docker services..."
          docker-compose -f replicacion_postgresql/docker-compose.yml down -v
